{% load i18n %}	
 <script type="text/javascript" src="{{STATIC_URL}}ui/js/jquery.ui.autocomplete.js"></script>
<div id="show-time">
    <form>
    	<div class="fields hform">
    		<div id="ajax_content_loading" style="display: none;" class="content-loading">
				<img src="{{STATIC_URL}}ui/images/global/loading-s.gif"><br><p>{% trans 'Please Wait' %}</p>
		   </div>
            <div class="field-group"> 
            	<div class="field select-field">	
                   <div class="label"><label>{% trans 'Select Movie' %}</label></div>		
                   <input type="hidden" name="theatrename" id="theatrename" value="{{theatres.id}}">
                    <div class="value">
                        <select name="movie" id="movie" value="{{th.id}}" onchange="showscreens(this);" class="lb_select-menu" style="width:354px;">
				        	<option value="">Select Movies</option>
				        	{% for th in movie %}
					        	<option value="{{th.id}}">{{th.title}}</option>
							{% endfor %}
				        </select>
                    </div>	
                </div>	
                {% for date in dates %}
					<div class="field text-field">	
					{% if forloop.first %}
                        <div class="label"><label>{% trans "Today" %} ({{date|date:'d M'}})</label></div>	
					{% else %}	
						<div class="label"><label>{{date|date:"l"}} ({{date|date:'d M'}})</label></div>
					{% endif %}		
                        <div class="value" >
                        	<span><input type="text" class="test-stt"  maxlength="150"  name="show_time{{forloop.counter}}"  id="about{{forloop.counter}}"></span>
							{% if forloop.first %}
								<span><a href="javascript:populateST('apply')">{% trans "Apply For All" %},</a></span>
								&nbsp;<span><a href="javascript:populateST('clear')">{% trans "Clear" %}</a></span>
								<span class="tip">{% trans "Example:12:00 PM,01:00 PM,02:00 PM" %}</span>
							{% endif %}
                    </div>
					</div>      
                {% endfor %}
                          
                             
		</div>    
          
   
    
</div>
 </form>
<div class="modal-base form-submit group">
   <button role="button" class="cform-button prime right" type="button" id="more_theatres"><span class="cform-button-text">Create</span></button>
</div> 
</div>
    <script type="text/javascript" src="{{STATIC_URL}}ui/js/inline.js"></script>

<script type="text/javascript">
	function showscreens(obj){
	if(obj.value!=''){
	{% for a in added %}
		if(obj.value == {{a.movie.id}}){
			$('#movie').val("").trigger("liszt:updated");
			alert("You have already added showtime for this theatre  .\n Please click on edit to change");
			return false
		}
		
	{% endfor %}
	
	}
}	
function populateST(val){
	if(val=="apply"){
		s_value = window.document.getElementById('about1').value;
		if (s_value==''){alert("Please enter the showtimes");}
		else{for(i=1;i<=7;i++){window.document.getElementById('about'+i).value = s_value;}}	
	}else{
		for(i=1;i<=7;i++){window.document.getElementById('about'+i).value = "";}
	}
}
	
	
	
$(function($){
	$("#more_theatres").click(function(){
		var j=0;
		for(i=1;i<=7;i++){
			strRE = new RegExp( );
			strRE.compile( '^[\s ]*$', 'gi' );
			if(strRE.test($("#about"+i).val())==true){j=j+1;}
		}
		if(j==7){
				if($('#movie').val()==''){
					alert("Please select movie/enter the showtimes.");
				  	return false;
				}else{
					alert("Please enter the showtimes.");
			  		return false;			
				}		
			}else if($('#movie').val()==''){
				alert("Please select movie.");
			  	return false;
			}

		else{
			var show_time_add = [];
			$(".test-stt").each(function() {
				if ($(this).val()) {
					var myst=$(this).val();
					if(!myst.match(",$")){myst+=',';}
					if (myst.match(",,$")){myst+=',';}
				}
				else{
					var myst = ':';
					if(!myst.match(",$")){myst+=',';}
				}
				myst=$.trim(myst);//.replace(',',' '));
				show_time_add.push(myst);
			});
 			var dataString='id={{theatres.id}}';
			dataString+='&movie='+$('#movie').val();
			dataString+='&show_time='+show_time_add;
		  	var url="{% url 'staff_theatre_ajax_save_showtime' %}";
			$(".content-loading").show(3000);
			$.ajax({
				type:"GET",
				url:url ,
				data:dataString,
				dataType:'JSON',
				success: function(data){
					$('#showtimes').empty().html(data.html)
					$(".theatres-showtimes").colorbox({width: "880", initialWidth: "880", height:"auto", top:"5%"});
					$(".movie-showtimes").colorbox({ width: "770", initialWidth: "700", height:"auto", top:"5%",title:function(){return getLBTitle($(this));}});
					$(".edit_movie_lightbox").colorbox({width: "880", initialWidth: "880", height:"auto", top:"5%"});// This one i am using for edit theatre lightbox after adding colorbox
					
					
					$('.content-loading').hide(); 
					$.colorbox.close();	
					show_msg(data.msg,data.mtype);
				}
			});
		}	
	});
});

</script>
<script>
	var availableTags = [
			"10:00 AM",
			"10:15 AM",
			"10:30 AM",
			"10:45 AM",
			"11:00 AM",
			"11:15 AM",
			"11:30 AM",
			"11:45 AM",
			"12:00 PM",
			"12:15 PM",
			"12:30 PM",
			"12:45 PM",
			"1:00 PM",
			"1:15 PM",
			"1:30 PM",
			"1:45 PM",
			"2:00 PM",
			"2:15 PM",
			"2:30 PM",
			"2:45 PM",
			"3:00 PM",
			"3:15 PM",
			"3:30 PM",
			"3:45 PM",
			"4:00 PM",
			"4:15 PM",
			"4:30 PM",
			"4:45 PM",
			"5:00 PM",
			"5:15 PM",
			"5:30 PM",
			"5:45 PM",
			"6:00 PM",
			"6:15 PM",
			"6:30 PM",
			"6:45 PM",
			"7:00 PM",
			"7:15 PM",
			"7:30 PM",
			"7:45 PM",
			"8:00 PM",
			"8:15 PM",
			"8:30 PM",
			"8:45 PM",
			"9:00 PM",
			"9:15 PM",
			"9:30 PM",
			"9:45 PM",
			"10:00 PM"
		]; 
		
		
		
    
	$(function() {

	
		function split( val ) {
			return val.split( /,\s*/ );
		}
		function extractLast( term ) {
			return split( term ).pop();
		}

		$( "#about1" )
			// don't navigate away from the field on tab when selecting an item
			.bind( "keydown", function( event ) {
				if ( event.keyCode === $.ui.keyCode.TAB &&
						$( this ).data( "autocomplete" ).menu.active ) {
					event.preventDefault();
				}
			})
			.autocomplete({
				minLength: 0,
				source: function( request, response ) {
					// delegate back to autocomplete, but extract the last term
					response( $.ui.autocomplete.filter(
						availableTags, extractLast( request.term ) ) );
				},
				focus: function() {
					// prevent value inserted on focus
					return false;
				},
				select: function( event, ui ) {
					var terms = split( this.value );
					// remove the current input
					terms.pop();
					// add the selected item
					terms.push( ui.item.value );
					// add placeholder to get the comma-and-space at the end
					terms.push( "" );
					this.value = terms.join( ", " );
					return false;
				}
			});
	});
    	$(function() {
		
		function split( val ) {
			return val.split( /,\s*/ );
		}
		function extractLast( term ) {
			return split( term ).pop();
		}

		$( "#about2" )
			// don't navigate away from the field on tab when selecting an item
			.bind( "keydown", function( event ) {
				if ( event.keyCode === $.ui.keyCode.TAB &&
						$( this ).data( "autocomplete" ).menu.active ) {
					event.preventDefault();
				}
			})
			.autocomplete({
				minLength: 0,
				source: function( request, response ) {
					// delegate back to autocomplete, but extract the last term
					response( $.ui.autocomplete.filter(
						availableTags, extractLast( request.term ) ) );
				},
				focus: function() {
					// prevent value inserted on focus
					return false;
				},
				select: function( event, ui ) {
					var terms = split( this.value );
					// remove the current input
					terms.pop();
					// add the selected item
					terms.push( ui.item.value );
					// add placeholder to get the comma-and-space at the end
					terms.push( "" );
					this.value = terms.join( ", " );
					return false;
				}
			});
	});
		$(function() {
		
		function split( val ) {
			return val.split( /,\s*/ );
		}
		function extractLast( term ) {
			return split( term ).pop();
		}

		$( "#about3" )
			// don't navigate away from the field on tab when selecting an item
			.bind( "keydown", function( event ) {
				if ( event.keyCode === $.ui.keyCode.TAB &&
						$( this ).data( "autocomplete" ).menu.active ) {
					event.preventDefault();
				}
			})
			.autocomplete({
				minLength: 0,
				source: function( request, response ) {
					// delegate back to autocomplete, but extract the last term
					response( $.ui.autocomplete.filter(
						availableTags, extractLast( request.term ) ) );
				},
				focus: function() {
					// prevent value inserted on focus
					return false;
				},
				select: function( event, ui ) {
					var terms = split( this.value );
					// remove the current input
					terms.pop();
					// add the selected item
					terms.push( ui.item.value );
					// add placeholder to get the comma-and-space at the end
					terms.push( "" );
					this.value = terms.join( ", " );
					return false;
				}
			});
	});
		$(function() {
		
		function split( val ) {
			return val.split( /,\s*/ );
		}
		function extractLast( term ) {
			return split( term ).pop();
		}

		$( "#about4" )
			// don't navigate away from the field on tab when selecting an item
			.bind( "keydown", function( event ) {
				if ( event.keyCode === $.ui.keyCode.TAB &&
						$( this ).data( "autocomplete" ).menu.active ) {
					event.preventDefault();
				}
			})
			.autocomplete({
				minLength: 0,
				source: function( request, response ) {
					// delegate back to autocomplete, but extract the last term
					response( $.ui.autocomplete.filter(
						availableTags, extractLast( request.term ) ) );
				},
				focus: function() {
					// prevent value inserted on focus
					return false;
				},
				select: function( event, ui ) {
					var terms = split( this.value );
					// remove the current input
					terms.pop();
					// add the selected item
					terms.push( ui.item.value );
					// add placeholder to get the comma-and-space at the end
					terms.push( "" );
					this.value = terms.join( ", " );
					return false;
				}
			});
	});
		$(function() {
	
		function split( val ) {
			return val.split( /,\s*/ );
		}
		function extractLast( term ) {
			return split( term ).pop();
		}

		$( "#about5" )
			// don't navigate away from the field on tab when selecting an item
			.bind( "keydown", function( event ) {
				if ( event.keyCode === $.ui.keyCode.TAB &&
						$( this ).data( "autocomplete" ).menu.active ) {
					event.preventDefault();
				}
			})
			.autocomplete({
				minLength: 0,
				source: function( request, response ) {
					// delegate back to autocomplete, but extract the last term
					response( $.ui.autocomplete.filter(
						availableTags, extractLast( request.term ) ) );
				},
				focus: function() {
					// prevent value inserted on focus
					return false;
				},
				select: function( event, ui ) {
					var terms = split( this.value );
					// remove the current input
					terms.pop();
					// add the selected item
					terms.push( ui.item.value );
					// add placeholder to get the comma-and-space at the end
					terms.push( "" );
					this.value = terms.join( ", " );
					return false;
				}
			});
	});
		$(function() {
		
		function split( val ) {
			return val.split( /,\s*/ );
		}
		function extractLast( term ) {
			return split( term ).pop();
		}

		$( "#about6" )
			// don't navigate away from the field on tab when selecting an item
			.bind( "keydown", function( event ) {
				if ( event.keyCode === $.ui.keyCode.TAB &&
						$( this ).data( "autocomplete" ).menu.active ) {
					event.preventDefault();
				}
			})
			.autocomplete({
				minLength: 0,
				source: function( request, response ) {
					// delegate back to autocomplete, but extract the last term
					response( $.ui.autocomplete.filter(
						availableTags, extractLast( request.term ) ) );
				},
				focus: function() {
					// prevent value inserted on focus
					return false;
				},
				select: function( event, ui ) {
					var terms = split( this.value );
					// remove the current input
					terms.pop();
					// add the selected item
					terms.push( ui.item.value );
					// add placeholder to get the comma-and-space at the end
					terms.push( "" );
					this.value = terms.join( ", " );
					return false;
				}
			});
	});
		$(function() {

		function split( val ) {
			return val.split( /,\s*/ );
		}
		function extractLast( term ) {
			return split( term ).pop();
		}

		$( "#about7" )
			// don't navigate away from the field on tab when selecting an item
			.bind( "keydown", function( event ) {
				if ( event.keyCode === $.ui.keyCode.TAB &&
						$( this ).data( "autocomplete" ).menu.active ) {
					event.preventDefault();
				}
			})
			.autocomplete({
				minLength: 0,
				source: function( request, response ) {
					// delegate back to autocomplete, but extract the last term
					response( $.ui.autocomplete.filter(
						availableTags, extractLast( request.term ) ) );
				},
				focus: function() {
					// prevent value inserted on focus
					return false;
				},
				select: function( event, ui ) {
					var terms = split( this.value );
					// remove the current input
					terms.pop();
					// add the selected item
					terms.push( ui.item.value );
					// add placeholder to get the comma-and-space at the end
					terms.push( "" );
					this.value = terms.join( ", " );
					return false;
				}
			});
	});
		</script>